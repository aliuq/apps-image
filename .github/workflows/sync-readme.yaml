name: Update README

on:
  push:
    branches:
      - master
    paths:
      - apps/*/README.md

jobs:
  sync-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录

      - name: Prepare
        id: prepare
        uses: aliuq/script-action@v1.0.5-beta.5
        with:
          auto_install: true
          script: |
            import fs from 'node:fs'
            import path from 'node:path'

            const gcwd = process.env.GITHUB_WORKSPACE

            // 获取最近一次提交的文件
            const changedFiles = await execCommand(`git -C ${gcwd} diff-tree --no-commit-id --name-only -r HEAD`)
            await core.group('Changed files', async () => core.info(changedFiles))

            // 过滤出 README.md 文件
            const files = changedFiles.split('\n').filter(file => file.match(/^apps\/.*\/README\.md$/))
            await core.group('README.md files', async () => core.info(files.join('\n')))

            if (!files.length) {
              core.info('No README.md files changed')
              core.setOutput('status', 'success')
              process.exit(0)
            }

            const readmePath = files[files.length - 1]
            const appDir = path.dirname(readmePath)
            const metaFile = path.join(gcwd, appDir, 'meta.json')
            const meta = JSON.parse(fs.readFileSync(metaFile, 'utf-8'))

            const docker = meta.dockerMeta
            const skip = meta.skip || false

            const images = docker.images
            const matchDockerhub = images.find(i => i.match(/^aliuq\//))
            const matchGhcr = images.find(i => i.match(/^ghcr.io\//))

            const repo = matchDockerhub ? matchDockerhub : matchGhcr ? matchGhcr?.replace(/^ghcr.io\//, '') : ''
            const data = { repo }
            if (docker.readme_path !== false) {
              data.readme_path = path.join(appDir, docker.readme_path || 'README.md')
            }

            if (skip) {
              core.info('Skip sync README')
              core.setOutput('status', 'success')
              process.exit(0)
            } else {
              await core.group('JSON Output', async () => core.info(JSON.stringify(data, null, 2)))
              outputJson(data)
            }

      - name: Sync README
        uses: peter-evans/dockerhub-description@v4
        if: steps.prepare.outputs.repo != '' && steps.prepare.outputs.readme_path != ''
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ steps.prepare.outputs.repo }}
          readme-filepath: ${{ steps.prepare.outputs.readme_path }}
