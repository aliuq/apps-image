name: Build Docker Image

on:
  workflow_dispatch:
    inputs:
      context:
        description: App ContextÔºåe.g. apps/icones
        type: choice
        required: true
        options:
          # ContextStart
          - apps/cobalt
          - apps/icones
          - apps/inpaint-web
          - apps/jsonhero-web
          - apps/lsky
          - apps/memogram
          - apps/readest
          - apps/srcbook
          - apps/telegram-upload
          - apps/telemirror
          - apps/weektodo
          - apps/yulegeyu
          - base/alpine
          - base/nginx
          - base/self
          - base/tg-session
          - test/icones
          - test/self
          - test/weektodo
          - test/weektodo-mul
          # ContextEnd
      variants:
        description: Build variants, e.g. latest,stable
        default: latest
        type: string
      debug:
        description: Debug mode
        default: false
        type: boolean
  pull_request:
    branches:
      - master

jobs:
  metadata:
    name: Resolve Docker Metadata
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      matrix: ${{ steps.metadata.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Resolve metadata
        id: metadata
        uses: ./action/resolve-meta
        env:
          TZ: Asia/Shanghai
          DOCKERHUB_USERNAME: aliuq
          GHCR_USERNAME: aliuq
          ALI_ACR_REGISTRY: registry.cn-hangzhou.aliyuncs.com
          ALI_ACR_USERNAME: aliuq
        with:
          context: ${{ inputs.context }}
          variants: ${{ inputs.variants }}
          debug: ${{ inputs.debug }}

  docker-build:
    needs: metadata
    name: Build VariantÔºà${{ matrix.variant }}Ôºâ
    runs-on: ubuntu-latest
    if: needs.metadata.outputs.matrix
    permissions:
      contents: read
      packages: write
    strategy:
      matrix: ${{ needs.metadata.outputs.matrix && fromJson(needs.metadata.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.metadata.imageLines }}
          tags: ${{ matrix.metadata.tagLines }}
          labels: ${{ matrix.metadata.labelLines }}
          annotations: ${{ matrix.metadata.labelLines }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ matrix.pushDocker }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: ${{ matrix.pushGhcr }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Aliyun ACR
        uses: docker/login-action@v3
        if: ${{ matrix.pushAli && env.ACR_REGISTRY && env.ACR_USERNAME && env.ACR_PASSWORD }}
        env:
          ACR_REGISTRY: ${{ secrets.ALI_ACR_REGISTRY }}
          ACR_USERNAME: ${{ secrets.ALI_ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ALI_ACR_PASSWORD }}
        with:
          registry: ${{ secrets.ALI_ACR_REGISTRY }}
          username: ${{ secrets.ALI_ACR_USERNAME }}
          password: ${{ secrets.ALI_ACR_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.build.context }}
          file: ${{ matrix.build.file }}
          platforms: ${{ matrix.build.platformLines }}
          push: ${{ matrix.build.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push README
        if: ${{ matrix.readme.push }}
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ matrix.readme.repo }}
          readme-filepath: ${{ matrix.readme.path }}

      - name: Pre Notification
        id: pre-notify
        uses: actions/github-script@v7
        with:
          script: |
            const meta = ${{ toJson(fromJson(steps.meta.outputs.json)) }}
            const matrix = ${{ toJson(matrix) }}

            const data = {
              name: `**${matrix.name}**`,
              tags: meta.tags.map(t => `\`${t}\``).join('\n'),
              url: meta.labels['org.opencontainers.image.url'],
              flag: matrix.name.replace(/-/g, '_')
            }
            if (data.url) {
              data.name = `[**${matrix.name}**](${data.url})`
            }

            const buttons = []
            const infoButtons = [{ "text": "Â∑•‰ΩúÊµÅ", "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }]
            data.url && infoButtons.push({ "text": "‰ªìÂ∫ìÂú∞ÂùÄ", "url": data.url })
            infoButtons.push({ "text": "È°πÁõÆÂú∞ÂùÄ", "url": "https://github.com/${{ github.repository }}" })
            buttons.push(infoButtons)

            const registrys = []
            if (matrix.pushDocker) {
              registrys.push({ text: "Docker", url: `https://hub.docker.com/r/aliuq/${matrix.name}` })
            }
            if (matrix.pushGhcr) {
              registrys.push({ text: "GHCR", url: `https://github.com/users/aliuq/packages/container/package/${matrix.name}` })
            }
            if (matrix.pushAli) {
              registrys.push({ text: "ÈòøÈáå‰∫ë ACR", url: `https://cr.console.aliyun.com/repository/cn-hangzhou/aliuq/${matrix.name}/images` })
            }
            registrys.length && buttons.push(registrys)

            core.setOutput("tags", data.tags)
            core.setOutput("name", data.name)
            core.setOutput("flag", flag)
            core.setOutput("buttons", buttons)

      - name: Notification
        uses: aliuq/telegram-action@v1
        with:
          bot_token: ${{ secrets.BOT_TOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          reply_to_message_id: ${{ secrets.REPLY_TO_MESSAGE_ID }}
          message: |
            üéâ ${{ steps.pre-notify.outputs.name }} has new image builds

            ${{ steps.pre-notify.outputs.tags }}

            #build_image #app_${{ steps.pre-notify.outputs.flag }}

          buttons: ${{ steps.pre-notify.outputs.buttons }}

  merge-pull-request:
    name: Merge Pull Request
    runs-on: ubuntu-latest
    needs: [metadata, docker-build]
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Merge PR
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ github.event.pull_request.number }}
          MERGE_DELETE_BRANCH: true
