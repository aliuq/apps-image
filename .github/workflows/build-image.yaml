name: Release Docker Image

on:
  workflow_dispatch:
    inputs:
      context:
        description: 'Context directory, e.g. apps/tgcf'
        required: true
        default: ''
        type: string
  pull_request:
    branches:
      - master

jobs:
  resolve-docker-variables:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && startsWith(github.event.pull_request.title, 'chore(') && contains(github.event.pull_request.title, ' update version to '))
    permissions:
      pull-requests: read
    outputs:
      dockerfile: ${{ steps.app.outputs.dockerfile }}
      platforms: ${{ steps.app.outputs.platforms }}
      push: ${{ steps.app.outputs.push }}
      images: ${{ steps.app.outputs.images }}
      tags: ${{ steps.app.outputs.tags }}
      labels: ${{ steps.app.outputs.labels }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve
        id: app
        env:
          TITLE: ${{ github.event.pull_request.title }}
        run: |
          # chore(apps/tgcf): update sha to f0d5859
          # pick "apps/tgcf" from pr title
          #
          # If trigger by workflow_dispatch, then use ${{ inputs.context }}
          # If trigger by pull_request, then use ${{ github.event.pull_request.title }}
          #
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            echo "Trigger by workflow_dispatch"
            context=${{ inputs.context }}
          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "Trigger by pull_request"
            context=$(echo $TITLE | grep -oP '(?<=\().*?(?=\))')
          else
            echo "Unknown event: ${{ github.event_name }}"
            exit 1
          fi

          metadata="$context/meta.json"
          dockerfile="$context/Dockerfile"
          echo "metadata: $metadata"

          # if not exist $context, then exit as Success
          if [[ ! -d $context ]]; then
            echo "context not found, exit as Success"
            exit 0
          fi
          # if not exist $metadata, then exit as Success
          if [[ ! -f $metadata ]]; then
            echo "metadata not found, exit as Success"
            exit 0
          fi
          # if not exist $dockerfile, then exit as Success
          if [[ ! -f $dockerfile ]]; then
            echo "Dockerfile not found, exit as Success"
            exit 0
          fi

          app=$(jq -r '.name' $metadata)
          tags=$(jq -r '.tags' $metadata)
          branch=$(jq -r '.branch' $metadata)
          version=$(jq -r '.version' $metadata)
          repo=$(jq -r '.repo' $metadata)
          sha=$(jq -r '.sha' $metadata)
          images=$(jq -r '.images' $metadata)
          push=$(jq -r '.push' $metadata)
          platforms=$(jq -r '.platforms' $metadata)

          # Handle normal variables
          #
          if [[ $push == "null" ]]; then push=false; fi
          if [[ $platforms == "null" ]]; then
            if [[ "$push" == "false" ]]; then
              platforms="linux/amd64"
            else
              platforms="linux/amd64,linux/arm64"
            fi
          fi

          echo "::group::Normal Variables"
          echo "dockerfile: $dockerfile"
          echo "platforms: $platforms"
          echo "push: $push"
          echo "::endgroup::"
          echo "dockerfile=$dockerfile" >> $GITHUB_OUTPUT
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
          echo "push=$push" >> $GITHUB_OUTPUT

          # Handle images
          #
          # if not exist $images, then set default value
          if [[ $images == "null" ]]; then
            images="aliuq/$app\nghcr.io/aliuq/$app"
          else
            images=$(echo "$images" | jq -r '.[]')
          fi
          echo "::group::Images"
          echo -e "$images"
          echo "::endgroup::"
          echo "images<<EOF" >> $GITHUB_OUTPUT
          echo -e "$images" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Handle tags
          #
          echo "type=raw,value=$version" > tags.txt
          # 如果 $tags 不为空，则将 $tags 写入 tags.txt，$tags 格式为 `foo,bar,baz`
          if [[ $tags != "null" ]]; then
            IFS=',' read -r -a tags_array <<< "$tags"
            for tag in "${tags_array[@]}"; do
              echo "type=raw,value=$tag" >> tags.txt
            done
          fi
          # 如果存在 branch 则使用 branch 作为 tag
          if [[ $branch != "null" ]]; then
            echo "type=raw,value=$branch" >> tags.txt
          else
            echo "type=raw,value=latest" >> tags.txt
          fi
          echo "::group::Tags"
          echo -e "$(cat tags.txt)"
          echo "::endgroup::"
          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$(cat tags.txt)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Handle labels
          #
          # YYYY-MM-DDTHH:mm:ss.SSS[Z]
          create_time=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          echo "org.opencontainers.image.created=$create_time" > labels.txt
          echo "org.opencontainers.image.source=https://github.com/$GITHUB_REPOSITORY" >> labels.txt
          echo "org.opencontainers.image.title=$app" >> labels.txt
          echo "org.opencontainers.image.url=$GITHUB_REPOSITORY/$context" >> labels.txt
          echo "org.opencontainers.image.revision=$sha" >> labels.txt
          echo "org.opencontainers.image.description=$app image" >> labels.txt
          echo "org.opencontainers.image.licenses=Unknow" >> labels.txt
          echo "org.opencontainers.image.upstream=$repo" >> labels.txt
          echo "org.opencontainers.image.version=$version" >> labels.txt
          if [[ $branch != "null" ]]; then
            echo "org.opencontainers.image.branch=$branch" >> labels.txt
          fi
          echo "::group::Labels"
          echo -e "$(cat labels.txt)"
          echo "::endgroup::"
          echo "labels<<EOF" >> $GITHUB_OUTPUT
          echo -e "$(cat labels.txt)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  call-workflow-build:
    needs: resolve-docker-variables
    if: needs.resolve-docker-variables.outputs.dockerfile
    uses: aliuq/workflows/.github/workflows/build-image-notify.yml@master
    permissions:
      contents: read
      packages: write
    with:
      images: ${{ needs.resolve-docker-variables.outputs.images }}
      tags: ${{ needs.resolve-docker-variables.outputs.tags }}
      file: ${{ needs.resolve-docker-variables.outputs.dockerfile }}
      push: ${{ fromJSON(needs.resolve-docker-variables.outputs.push) }}
      platforms: ${{ needs.resolve-docker-variables.outputs.platforms }}
      meta_labels: ${{ needs.resolve-docker-variables.outputs.labels }}
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      CHAT_ID: ${{ secrets.CHAT_ID }}
      REPLY_TO_MESSAGE_ID: ${{ secrets.REPLY_TO_MESSAGE_ID }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  merge-pull-request:
    runs-on: ubuntu-latest
    needs: call-workflow-build
    if: |
      github.event_name == 'pull_request' && startsWith(github.event.pull_request.title, 'chore(') && contains(github.event.pull_request.title, ' update version to ') && needs.resolve-docker-variables.outputs.push == 'true'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Merge PR
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ github.event.pull_request.number }}
          MERGE_DELETE_BRANCH: true


